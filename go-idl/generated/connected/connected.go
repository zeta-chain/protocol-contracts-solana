// Code generated by go-idl. DO NOT EDIT.
package connected

import (
	"github.com/zeta-chain/protocol-contracts-solana/go-idl/types"
)

var IDLconnected = types.IDL{
	Address: "4xEw862A2SEwMjofPkUyd4NEekmVJKJsdHkK3UkAtDrc",
	Metadata: types.Metadata{
		Name:        "connected",
		Version:     "0.1.0",
		Spec:        "0.1.0",
		Description: "Test program used for testing withdraw and call feature",
	},
	Instructions: []types.Instruction{
		{
			Name:          "initialize",
			Discriminator: [8]byte{175, 175, 109, 31, 13, 152, 155, 237},
			Accounts: []types.Account{
				{
					Name:     "signer",
					Writable: true,
					Signer:   true,
					Address:  "",
					PDA:      nil,
				},
				{
					Name:     "pda",
					Writable: true,
					Signer:   false,
					Address:  "",
					PDA:      nil,
				},
				{
					Name:     "system_program",
					Writable: false,
					Signer:   false,
					Address:  "11111111111111111111111111111111",
					PDA:      nil,
				},
			},
		},
		{
			Name:          "on_call",
			Discriminator: [8]byte{16, 136, 66, 32, 254, 40, 181, 8},
			Accounts: []types.Account{
				{
					Name:     "pda",
					Writable: true,
					Signer:   false,
					Address:  "",
					PDA:      nil,
				},
				{
					Name:     "gateway_pda",
					Writable: false,
					Signer:   false,
					Address:  "",
					PDA:      nil,
				},
				{
					Name:     "random_wallet",
					Writable: false,
					Signer:   false,
					Address:  "",
					PDA:      nil,
				},
				{
					Name:     "system_program",
					Writable: false,
					Signer:   false,
					Address:  "11111111111111111111111111111111",
					PDA:      nil,
				},
			},
		},
	},
	Accounts: []types.Account{
		{
			Name:     "Pda",
			Writable: false,
			Signer:   false,
			Address:  "",
			PDA:      nil,
		},
	},
	Errors: []types.Error{
		{Code: 6000, Name: "InvalidDataFormat", Msg: "The data provided could not be converted to a valid UTF-8 string."},
	},
}

const (
	InstructionInitialize = "initialize"
	InstructionOn_call    = "on_call"
)
